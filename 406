06. Queue Reconstruction by Height
You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). 
Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. 
The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
题目分析：
1.给出一系列的人，排序
2.每个人都有自己的属性[h, k]
  h 代表高度
  k 在他的前面有多少人
3.先按高度（从高到低）排，最后按照个人想法（想前面排有多少人）插队
4.同时满足这两个排队要求

 

Example 1:

Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.
Person 1 has height 7 with no other people taller or the same height in front.
Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
Person 3 has height 6 with one person taller or the same height in front, which is person 1.
Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
Person 5 has height 7 with one person taller or the same height in front, which is person 1.
Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
Example 2:

Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
Constraints:

1 <= people.length <= 2000
0 <= hi <= 106
0 <= ki < people.length
It is guaranteed that the queue can be reconstructed.

答案：
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:   名字的写法：第一个单词字母小写，第二个字母大写
        people.sort(key=lambda x:x[1])     只按个人想法排序，想排在前面有几个人就排，按照人数到人多, x[1]代表个人想法，因为列表【】，从0开始排序
        people.sort(key=lambda x:x[0], reverse=True)   只按高度排序，x[0]代表高度，从高到矮排，与默认值相反，所以reverse= True
        res = []    设置一个空集，重新把之前的两个组插进来，重新排序
        for person in people:         遍历
            res.insert(person[1], person)     按照个人想法插入人， person[1]代表个人想法， person 代表个人
        
        return res        跳出循环，最后输出整理后的队伍
        
        
