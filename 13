13. Roman to Integer
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

题目：
1.给出罗马数字字母
2.输出相对应的数字

 

Example 1:

Input: s = "III"
Output: 3
Example 2:

Input: s = "IV"
Output: 4
Example 3:

Input: s = "IX"
Output: 9
Example 4:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 5:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

整体思路
1.如果前面的字母比后面的字母代表的数字小，则是一对，特殊数字
2.建dictionary，成对出现
3.正常顺序应该是前面的字母代表的数字比后面的大

class Solution:
    def romanToInt(self, s: str) -> int:
        d = {"I": 1 , "V": 5,"X":10,"L":50 , "C":100, "D":500, "M": 1000 }  建dictionary
        res = 0  输出结果暂定为0
        
        for i in range(len(s)):   循环for，当i代表1，2，3.在字母的长度为界限
            if i> 0 and d[s[i]]> d[s[i-1]]:    前面比后面大时，特殊情况
                res += d[s[i]] - 2*d[s[i-1]]   这里的*2 代表，前面两个数已经相加，到第三个                                                                    数时，应该减去两个前面的数，
								                                              例如MCM =（ M + C ）+M - C - C = 1900
																															1000 + 900 = 1000 + 100 + 1000 - 100 - 100
            else:
                res += d[s[i]]     正常顺序下，连续相加
        
        return res   输出结果
