1091. Shortest Path in Binary Matrix
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 题目分析：
1.给出方格，找出从左上角到右下角的方格
2.只能走0， 1表示不能走
3.求最短的路线
4.一个点有8个方向可以走



Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

整体思路
1. BFS的解法breadth first search
2. 要是起始点为0 或者终点为0，则退出，不成立
3. 一个点有8个方向可以走
    （0,0 ），（0,-1），（0,1），（1,1）
		（1, -1），（-1,1）， （-1, -1），(-1,0)
4. 自己画图 x, y, z, -z 轴 一个 ‘’米“ 的方向

答案（python）
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        from collections import deque
        n = len(grid)  方格的长度
        if grid[0][0] == 1 or grid[n - 1][n - 1] == 1:   如果起始点00 和终点==1，被堵
            return -1     输出-1
        if n == 1:    只有一格
            return 1    输出 1
        res = 1  题目的描述是从 1 到k 的路径，起始点下标=1
        path = deque()   双向对列 deque（），跟list 差不多，它比list效率高
        path.append([0, 0])    从起点开始
        while path:     循环while 
            for _ in range(len(path)):  
                x, y = path.popleft()
                for new_x, new_y in [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1],
                                     [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]]:      八个方向
                    
                    if new_x == n - 1 and new_y == n - 1:  到了终点
                        return res + 1    算一个
                    if not 0 <= new_x < n or not 0 <= new_y < n:  扩展点 超过边界
                        continue      跳过
                    if grid[new_x][new_y] == 1:     被堵塞
                        continue    跳过
                    if grid[new_x][new_y] == -1:    已经走过，被标记为-1
                        continue    跳过
                    if grid[new_x][new_y] == 0:    有路
                        grid[new_x][new_y] = -1     走过就标记为-1
                        path.append([new_x, new_y])    # 将扩展的点加入path，到下一层的时候                                                                                   继续扩展
            res += 1  答案result 加1# 对某一层的元素都求判定过后，距离加1(同一个层次中                                  的所有点的距离距离起点都是相等的
        return -1    


