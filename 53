53. Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
题目分析：
1.给出一个数组，数组里面有一系列的数字
2.找出子集，子集里面有位置相连着的数字
3.找出位置连着的数字相加 和  为最大的子集
4.一定要是位置相连的数字才行，也可以单独一个数字

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [0]
Output: 0
Example 4:

Input: nums = [-1]
Output: -1
Example 5:

Input: nums = [-100000]
Output: -100000
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105

答案：（python 的写法）
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSub, curSum = nums[0], 0    设置最大的数组sub = nums[0], 和目前位置相连的两个数相加最大的和 为0
        
        for n in nums:          循环遍历for loop， n 代表数组里面的数子
            if curSum < 0:       排除法，可以省运行时间，如果目前的和小于0 
                curSum = 0     则 重新把它设置为0
            curSum += n       任何加上下一个数字
            maxSub = max(maxSub, curSum) 
        return maxSub
            
