278. First Bad Version
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
题目分析：
1.给出一系列排好序的含有不合格产品
2.如果一个产品不合格，后面的产品全部不合格
3.找出第一个不合格的产品
 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Example 2:

Input: n = 1, bad = 1
Output: 1
 

Constraints:

1 <= bad <= n <= 231 - 1

整体思路
1.如果一个个地找，有点浪费时间，肯定超出了时间
2.所以用二分法缩短时间

class Solution:
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """                              这些是comment
        l,r = 0, n             设置left左边=0跟right右边 为最后的产品n
        while l <= r:         当左边< 右边时，用while循环
            mid = (l+r)//2      中间值为两个数的中间
            if isBadVersion(mid):     假设坏的产品在中间
                r = mid -1        右边向前一个移动
            else:
                l = mid + 1       左边向后移动
        return l      输出最靠近左边的数，因为第一个影响后面全部
