435. Non-overlapping Intervals
Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

题目分析：
1.无重叠区间
2.给出一系列的区间，找出最少数目的区间你用来删除，最终得到没有重叠的区间
3.如果第2个区间之间的1起点= 第一个区间的终点，那么也是成立的

Example 1:

Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:

Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:

Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.


答案：
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if not intervals:         分两种情况，第一个是没有区间，则return 0，
            return 0
        intervals = sorted(intervals, key= lambda x: x[1])    第二种情况： 有区间，则排序，按照每个区间的终点排序
        ans = 0                     先假设输出的answer 答案为0
        end = intervals[0][1]           先设置终点为第一个区间（排序从0开始）的终点【1】
        
        for i in range(1, len(intervals)):   for loop循环，条件从第二个区间（排序为1），开始，到全部区间的总数结束
            if intervals[i][0] < end:          if 条件语句，如果区间的起点小于上一个区间的终点， 
                ans += 1                          保留前一个终点
            else:                               不然
                end = intervals[i][1]            更新终点为测试的那个区间
        
        return ans  跳出循环，输出答案
        
        
