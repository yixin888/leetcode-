122. Best Time to Buy and Sell Stock II
You are given an array prices for which the ith element is the price of a given stock on day i.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

题目分析：
1.给出一支股票
2.可以进行多次买卖，以赚取最大利润 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e., max profit = 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

答案：
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxprofit = 0     先设置目前最大的利润为0
        for i in range(1, len(prices)):    开始遍历，i 是天数，从第一天开始，到最后价格的那一天，有多少个价格就有多少天 
            if (prices[i] > prices[i-1]):    如果这一天的价格比前一天的价格大
                maxprofit += prices[i]- prices[i-1]    最大的利润=这一天减去前一天的价格，利润一个个地加上去，整体的思想是把  所有升的价格加起来 - 全部降的价格
            
        return maxprofit   最后输出最终的最大利润
