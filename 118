118. Pascal's Triangle
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]

题目:
1.给出一系列数字
2.生成杨辉三角
3.并且输出每一行的数字

思路：
1.上面以后的两个数字之和等于下面一行的数字
2.前后都是1，中间的数= 上面两数之和


class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        result = []         设置结果为空集
        for i in range(numRows):         遍历每一行
            result.append([])        每一行前后都用括号包着
            for j in range(i+1):         在每一行里面，再遍历每一个数
                if j in (0,i):          如果是前面第一个数或者后面第一个数
                    result[i].append(1)        则前后都+ 1
                else:       剩下的是每一行中间的数
                    result[i].append(result[i-1][j-1] + result[i-1][j])
									每一个答案都一一添加	
									每一个中间数= 第i行的上面一行 【i-1】的第 【j -1】个数+ 【j】之和
        return result
 输出最总答案
