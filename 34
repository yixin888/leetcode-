34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?
题目分析：
1.给出一系列的排好序的数字
2.找出目标位置的起始位置跟最终位置
3.找不到目标数字，则输出【-1，-1】


 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
答案：
解题思路
1.这里注意，跟以往的两个方针左右开始找有点不一样
2.它要分两个阶段
3.第一次先找出最开始的位置
4.第二次再从后面找出结束的位置
5.因为它如果有三个数【0，8，8，8，9】
6.一般找到前两个就结束了，这个要分两次找，最前跟最后

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums:              如果找不到数字
            return [-1,-1]             输出【-1，-1】
        n = len(nums)-1         最后的数字的序号
        start, end = -1, -1          定义开始字母跟最后字母为-1
        
				这里先从左边开始找最开始的数字，之后再找结束的数字，分两部分
       
			 l, r = 0, n         左边left为0，起始位置， 右边字母为n
        while l <= r:           当左边小于右边时
            mid = (l+ r) //2     中间值
            if nums[mid] == target:   目标数字==中间值时
                start = mid       开始值等于中间值
                r = mid - 1      再往左边找，因为要找最左边的开始位置
            elif nums[mid] > target:   如果中间值> 目标数字
                r= mid - 1       找中间值之前的前半部分，从0 到mid-1
            else:
                l = mid + 1     不然，如果中间值 < 目标数字，就找目标值之后的后半部分
        print('start:', start)     输出目标数字的起始位置
    
		后面开始找目标位置的终端位置（同样的步骤）
        l, r = 0, n            左右=0，n
        while l <= r:      左边 小于右边
            mid = (l + r) //2       中间值
            if nums[mid] == target:   目标数字= 中间数字
                end = mid    终端=中间值
                l = mid + 1     往中间值的后半部分开始找
            elif nums[mid] > target:   如果中间值> 目标位置
                r = mid -1    中间值往前找
            else:
                l = mid +1    不然，中间值< 目标位置，往后找
        print('end:', end)    输出最后位置
        return[start, end]   输出起始，终端位置
                
另外一种解法，只需要写找出起始位置方程，然后call两次方程找出最终位置
https://www.youtube.com/watch?v=4sQL7R5ySUU

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        left = self.binSearch(nums, target, True)
        right = self.binSearch(nums, target, False)
        return [left, right]
    
    # leftBias=[True/False], if false, res is rightBiased
    def binSearch(self, nums, target, leftBias):
        l, r = 0, len(nums) - 1
        i = -1
        while l <= r:
            m = (l + r) // 2
            if target > nums[m]:
                l = m + 1
            elif target < nums[m]:
                r = m - 1
            else:
                i = m
                if leftBias:
                    r = m - 1
                else:
                    l = m + 1
        return i 


另一种答案：
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        
		def first_position(nums, target):
            l, r, first_position = 0, len(nums) - 1, -1
            while l <= r:
                mid = l + (r-l) // 2
                if nums[mid]  == target:
                    first_position = mid
                    r = mid - 1
                elif nums[mid] < target:
                    l = mid + 1
                else:
                    r = mid - 1
            return first_position
        
		def last_pos(nums, target):
            l, r, last = 0, len(nums) - 1, -1
            while l <= r:
                mid = l + (r-l)//2
                if nums[mid] == target:
                    last = mid
                    l = mid+1
                elif nums[mid] < target:
                    l = mid + 1
                else:
                    r = mid - 1
            return last
        
		return [first_position(nums, target), last_pos(nums, target)]
